#!/bin/bash

# ====================================================================
# Script d'auto-installation ComfyUI pour Massed Compute
# √Ä coller dans le script de d√©marrage de Massed Compute
# ====================================================================

# Ce script fait tout automatiquement :
# 1. Clone et installe ComfyUI
# 2. Cr√©e des raccourcis desktop cliquables
# 3. Lance automatiquement ComfyUI si souhait√©

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# ====================================================================
# CONFIGURATION
# ====================================================================

COMFYUI_DIR="$HOME/ComfyUI"
DESKTOP_DIR="$HOME/Desktop"
SCRIPTS_DIR="$HOME/comfyui-scripts"

# ====================================================================
# PARTIE 1: INSTALLATION SYST√àME
# ====================================================================

log_info "üöÄ D√©but de l'installation automatique ComfyUI pour Massed Compute"

# Cr√©er le dossier Desktop s'il n'existe pas
mkdir -p "$DESKTOP_DIR"
mkdir -p "$SCRIPTS_DIR"

# Installation des d√©pendances syst√®me
log_info "üì¶ Installation des d√©pendances syst√®me..."
sudo apt-get update -qq
sudo apt-get install -y -qq \
    python3-pip python3-venv python3-dev \
    build-essential libgl1-mesa-glx libglib2.0-0 \
    libsm6 libxext6 libxrender1 libgomp1 \
    wget curl git ffmpeg \
    libcudnn8 libcudnn8-dev \
    xterm zenity 2>/dev/null || true

# ====================================================================
# PARTIE 2: INSTALLATION COMFYUI
# ====================================================================

log_info "üîß Cr√©ation des scripts d'installation..."

# Cr√©er le script d'installation principal
cat > "$SCRIPTS_DIR/install_comfyui.sh" << 'INSTALL_SCRIPT'
#!/bin/bash

COMFYUI_DIR="$HOME/ComfyUI"
VENV_DIR="$COMFYUI_DIR/venv"
CUSTOM_NODES_DIR="$COMFYUI_DIR/custom_nodes"

echo "üîß Installation de ComfyUI..."

# Clone ou update ComfyUI
if [ -d "$COMFYUI_DIR" ]; then
    echo "Mise √† jour de ComfyUI..."
    cd "$COMFYUI_DIR" && git pull
else
    echo "Clonage de ComfyUI..."
    git clone https://github.com/comfyanonymous/ComfyUI.git "$COMFYUI_DIR"
fi

cd "$COMFYUI_DIR"

# Environnement virtuel Python
echo "Cr√©ation de l'environnement Python..."
python3 -m venv "$VENV_DIR"
source "$VENV_DIR/bin/activate"

# Mise √† jour pip
pip install --upgrade pip wheel setuptools

# PyTorch avec CUDA
echo "Installation de PyTorch avec support CUDA..."
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

# Requirements ComfyUI
echo "Installation des d√©pendances ComfyUI..."
pip install -r requirements.txt

# Packages suppl√©mentaires utiles
echo "Installation des packages suppl√©mentaires..."
pip install opencv-python transformers accelerate safetensors \
    omegaconf einops torchsde kornia spandrel soundfile

# xformers pour optimisation m√©moire
echo "Installation de xformers..."
pip install xformers --index-url https://download.pytorch.org/whl/cu121

# Custom nodes essentiels
echo "Installation des custom nodes essentiels..."
mkdir -p "$CUSTOM_NODES_DIR"

# ComfyUI Manager
[ ! -d "$CUSTOM_NODES_DIR/ComfyUI-Manager" ] && \
    git clone https://github.com/ltdrdata/ComfyUI-Manager.git "$CUSTOM_NODES_DIR/ComfyUI-Manager"

# Impact Pack
[ ! -d "$CUSTOM_NODES_DIR/ComfyUI-Impact-Pack" ] && \
    git clone https://github.com/ltdrdata/ComfyUI-Impact-Pack.git "$CUSTOM_NODES_DIR/ComfyUI-Impact-Pack"

# Efficiency Nodes
[ ! -d "$CUSTOM_NODES_DIR/efficiency-nodes-comfyui" ] && \
    git clone https://github.com/jags111/efficiency-nodes-comfyui.git "$CUSTOM_NODES_DIR/efficiency-nodes-comfyui"

# WAS Node Suite
[ ! -d "$CUSTOM_NODES_DIR/was-node-suite-comfyui" ] && \
    git clone https://github.com/WASasquatch/was-node-suite-comfyui.git "$CUSTOM_NODES_DIR/was-node-suite-comfyui"

# Cr√©er structure dossiers
echo "Cr√©ation de la structure des dossiers..."
mkdir -p "$COMFYUI_DIR"/{models/{checkpoints,vae,loras,embeddings,controlnet,clip,upscale_models},input,output,temp}

echo "‚úÖ Installation ComfyUI termin√©e!"
INSTALL_SCRIPT

chmod +x "$SCRIPTS_DIR/install_comfyui.sh"

# ====================================================================
# PARTIE 3: CR√âATION DES LANCEURS
# ====================================================================

log_info "üé® Cr√©ation des raccourcis desktop..."

# Script de lancement ComfyUI
cat > "$SCRIPTS_DIR/start_comfyui.sh" << 'START_SCRIPT'
#!/bin/bash
cd "$HOME/ComfyUI"
source venv/bin/activate

# D√©tection automatique du port disponible
PORT=8188
while lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null ; do
    PORT=$((PORT+1))
done

echo "üöÄ Lancement de ComfyUI sur le port $PORT"
echo "üìç Acc√®s local: http://localhost:$PORT"
echo "üìç Acc√®s distant: http://$(hostname -I | awk '{print $1}'):$PORT"
echo ""
echo "üî• Massed Compute - ComfyUI est pr√™t!"
echo ""
echo "Pour arr√™ter: Ctrl+C"

python main.py --listen 0.0.0.0 --port $PORT --cuda-device 0 --use-pytorch-cross-attention
START_SCRIPT

chmod +x "$SCRIPTS_DIR/start_comfyui.sh"

# Script de t√©l√©chargement de mod√®les depuis fichier config
cat > "$SCRIPTS_DIR/download_models.sh" << 'DOWNLOAD_SCRIPT'
#!/bin/bash

MODELS_DIR="$HOME/ComfyUI/models"
CONFIG_FILE="$HOME/comfyui-scripts/models_config.txt"
CONFIG_URL="https://raw.githubusercontent.com/Elthibert/massed-compute-comfyui/main/models_config.txt"

# Fonction de t√©l√©chargement avec barre de progression
download_model() {
    local TYPE=$1
    local URL=$2
    local NAME=$3
    local DESC=$4
    
    # D√©terminer le dossier de destination selon le type
    case $TYPE in
        CHECKPOINT) DEST_DIR="$MODELS_DIR/checkpoints" ;;
        VAE) DEST_DIR="$MODELS_DIR/vae" ;;
        UPSCALER) DEST_DIR="$MODELS_DIR/upscale_models" ;;
        CONTROLNET) DEST_DIR="$MODELS_DIR/controlnet" ;;
        LORA) DEST_DIR="$MODELS_DIR/loras" ;;
        EMBEDDING) DEST_DIR="$MODELS_DIR/embeddings" ;;
        UNET) DEST_DIR="$MODELS_DIR/unet" ;;
        CLIP) DEST_DIR="$MODELS_DIR/clip" ;;
        *) DEST_DIR="$MODELS_DIR/other" ;;
    esac
    
    mkdir -p "$DEST_DIR"
    
    echo "üì• T√©l√©chargement: $NAME"
    echo "   Type: $TYPE"
    echo "   Description: $DESC"
    echo "   Destination: $DEST_DIR"
    
    # Nom du fichier depuis l'URL
    FILENAME=$(basename "$URL" | sed 's/?.*//g')
    
    # T√©l√©charger avec wget
    wget --progress=bar:force -c "$URL" -O "$DEST_DIR/$FILENAME" 2>&1
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ $NAME t√©l√©charg√© avec succ√®s!"
    else
        echo "‚ùå Erreur lors du t√©l√©chargement de $NAME"
    fi
    echo "---"
}

# Menu principal
show_menu() {
    echo "===================================="
    echo "    T√âL√âCHARGEMENT DES MOD√àLES"
    echo "===================================="
    echo ""
    echo "1) T√©l√©charger depuis le fichier de config"
    echo "2) √âditer le fichier de config"
    echo "3) T√©l√©charger le fichier de config depuis GitHub"
    echo "4) T√©l√©charger TOUS les mod√®les du config"
    echo "5) Mode interactif (choisir les mod√®les)"
    echo "6) Quitter"
    echo ""
}

# Mode interactif avec zenity
interactive_mode() {
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "‚ùå Fichier de config non trouv√©. T√©l√©chargement..."
        wget -q "$CONFIG_URL" -O "$CONFIG_FILE" 2>/dev/null || {
            echo "Cr√©ation d'un fichier de config par d√©faut..."
            create_default_config
        }
    fi
    
    # Lire les mod√®les disponibles
    MODELS_LIST=""
    while IFS='|' read -r TYPE URL NAME DESC; do
        # Ignorer les commentaires et lignes vides
        [[ "$TYPE" =~ ^#.*$ ]] || [ -z "$TYPE" ] && continue
        MODELS_LIST="$MODELS_LIST FALSE \"$NAME\" \"$DESC\" \"$TYPE\""
    done < "$CONFIG_FILE"
    
    # Afficher le menu de s√©lection
    eval "zenity --list --title=\"S√©lection des mod√®les\" \
        --text=\"Cochez les mod√®les √† t√©l√©charger:\" \
        --checklist --column=\"Choix\" --column=\"Mod√®le\" --column=\"Description\" --column=\"Type\" \
        --width=700 --height=500 \
        $MODELS_LIST" | while IFS='|' read -r SELECTED; do
        
        # T√©l√©charger les mod√®les s√©lectionn√©s
        while IFS='|' read -r TYPE URL NAME DESC; do
            [[ "$TYPE" =~ ^#.*$ ]] || [ -z "$TYPE" ] && continue
            if [[ "$SELECTED" == *"$NAME"* ]]; then
                download_model "$TYPE" "$URL" "$NAME" "$DESC"
            fi
        done < "$CONFIG_FILE"
    done
}

# Cr√©er un fichier de config par d√©faut VIDE
create_default_config() {
    cat > "$CONFIG_FILE" << 'EOF'
# Fichier de configuration des mod√®les pour ComfyUI
# Format: TYPE|URL|NOM|DESCRIPTION
# 
# D√©commentez les lignes pour activer le t√©l√©chargement automatique
# Ajoutez vos propres mod√®les en suivant le m√™me format
#
# Exemples:
# CHECKPOINT|https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned-emaonly.safetensors|SD 1.5|Stable Diffusion 1.5
# VAE|https://huggingface.co/stabilityai/sd-vae-ft-mse-original/resolve/main/vae-ft-mse-840000-ema-pruned.safetensors|VAE Standard|VAE pour SD 1.5
# LORA|https://example.com/my_lora.safetensors|Mon LoRA|Description
EOF
}

# T√©l√©charger automatiquement les mod√®les non-comment√©s
auto_download() {
    echo "üì• T√©l√©chargement automatique des mod√®les activ√©s..."
    
    while IFS='|' read -r TYPE URL NAME DESC; do
        # Ignorer les lignes comment√©es et vides
        [[ "$TYPE" =~ ^#.*$ ]] || [ -z "$TYPE" ] && continue
        
        download_model "$TYPE" "$URL" "$NAME" "$DESC"
    done < "$CONFIG_FILE"
    
    echo "‚úÖ T√©l√©chargement automatique termin√©!"
}

# Programme principal
if command -v zenity &> /dev/null; then
    # Si zenity est disponible, mode interactif
    interactive_mode
else
    # Sinon, mode CLI
    while true; do
        show_menu
        read -p "Choix: " choice
        
        case $choice in
            1)
                if [ ! -f "$CONFIG_FILE" ]; then
                    echo "T√©l√©chargement du fichier de config..."
                    wget -q "$CONFIG_URL" -O "$CONFIG_FILE" || create_default_config
                fi
                auto_download
                ;;
            2)
                nano "$CONFIG_FILE" || vi "$CONFIG_FILE"
                ;;
            3)
                wget "$CONFIG_URL" -O "$CONFIG_FILE"
                echo "‚úÖ Config t√©l√©charg√©e depuis GitHub"
                ;;
            4)
                # T√©l√©charger TOUS les mod√®les (m√™me comment√©s)
                sed 's/^#//' "$CONFIG_FILE" | while IFS='|' read -r TYPE URL NAME DESC; do
                    [ -z "$TYPE" ] && continue
                    download_model "$TYPE" "$URL" "$NAME" "$DESC"
                done
                ;;
            5)
                echo "Mode interactif n√©cessite zenity. Installation..."
                sudo apt-get install -y zenity
                interactive_mode
                ;;
            6)
                exit 0
                ;;
            *)
                echo "Option invalide"
                ;;
        esac
        
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
fi
DOWNLOAD_SCRIPT

chmod +x "$SCRIPTS_DIR/download_models.sh"

# ====================================================================
# PARTIE 4: CR√âATION DES RACCOURCIS DESKTOP
# ====================================================================

# Raccourci pour installer ComfyUI (premi√®re utilisation)
cat > "$DESKTOP_DIR/1_Install_ComfyUI.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=üîß Installer ComfyUI
Comment=Premi√®re installation de ComfyUI (Massed Compute)
Exec=xterm -geometry 120x40 -title "Installation ComfyUI - Massed Compute" -e "bash $SCRIPTS_DIR/install_comfyui.sh; echo 'Appuyez sur Entr√©e pour fermer...'; read"
Icon=system-software-install
Terminal=false
Categories=Application;
EOF

# Raccourci pour lancer ComfyUI
cat > "$DESKTOP_DIR/2_Launch_ComfyUI.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=üöÄ Lancer ComfyUI
Comment=D√©marrer ComfyUI sur Massed Compute
Exec=xterm -geometry 120x30 -title "ComfyUI - Massed Compute" -hold -e "bash $SCRIPTS_DIR/start_comfyui.sh"
Icon=applications-graphics
Terminal=false
Categories=Application;
EOF

# Raccourci pour t√©l√©charger des mod√®les
cat > "$DESKTOP_DIR/3_Download_Models.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=üì• T√©l√©charger Mod√®les
Comment=T√©l√©charger des mod√®les IA
Exec=bash $SCRIPTS_DIR/download_models.sh
Icon=download
Terminal=false
Categories=Application;
EOF

# Raccourci pour ouvrir le dossier ComfyUI
cat > "$DESKTOP_DIR/4_ComfyUI_Folder.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=üìÅ Dossier ComfyUI
Comment=Ouvrir le dossier ComfyUI
Exec=xdg-open $COMFYUI_DIR
Icon=folder
Terminal=false
Categories=Application;
EOF

# Rendre tous les raccourcis ex√©cutables
chmod +x "$DESKTOP_DIR"/*.desktop

# Permettre l'ex√©cution des fichiers desktop (pour certains environnements)
gio set "$DESKTOP_DIR"/*.desktop metadata::trusted true 2>/dev/null || true

# ====================================================================
# PARTIE 5: SCRIPT AUTO-RUN (OPTIONNEL)
# ====================================================================

# Cr√©er un script qui installe ET lance automatiquement
cat > "$DESKTOP_DIR/AUTO_START_ALL.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=‚ö° AUTO TOUT FAIRE
Comment=Installe et lance ComfyUI automatiquement (Massed Compute)
Exec=bash -c "if [ ! -d '$COMFYUI_DIR/venv' ]; then xterm -geometry 120x40 -title 'Installation - Massed Compute' -e 'bash $SCRIPTS_DIR/install_comfyui.sh'; fi; xterm -geometry 120x30 -title 'ComfyUI - Massed Compute' -hold -e 'bash $SCRIPTS_DIR/start_comfyui.sh'"
Icon=starred
Terminal=false
Categories=Application;
StartupNotify=true
EOF

chmod +x "$DESKTOP_DIR/AUTO_START_ALL.desktop"

# Script pour importer des workflows depuis une URL
cat > "$SCRIPTS_DIR/import_workflow.sh" << 'IMPORT_SCRIPT'
#!/bin/bash

WORKFLOW_URL=$(zenity --entry --title="Importer un Workflow" \
    --text="Entrez l'URL du workflow (GitHub, Huggingface, etc.):" \
    --width=500)

if [ ! -z "$WORKFLOW_URL" ]; then
    WORKFLOW_DIR="$HOME/ComfyUI/workflows"
    mkdir -p "$WORKFLOW_DIR"
    
    FILENAME=$(basename "$WORKFLOW_URL")
    wget "$WORKFLOW_URL" -O "$WORKFLOW_DIR/$FILENAME"
    
    if [ $? -eq 0 ]; then
        zenity --info --text="Workflow import√© avec succ√®s!\n\nFichier: $FILENAME\nDossier: $WORKFLOW_DIR" --width=300
    else
        zenity --error --text="Erreur lors du t√©l√©chargement du workflow" --width=300
    fi
fi
IMPORT_SCRIPT

chmod +x "$SCRIPTS_DIR/import_workflow.sh"

# Raccourci pour importer des workflows
cat > "$DESKTOP_DIR/5_Import_Workflow.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=üì§ Importer Workflow
Comment=Importer un workflow depuis une URL
Exec=bash $SCRIPTS_DIR/import_workflow.sh
Icon=document-import
Terminal=false
Categories=Application;
EOF

chmod +x "$DESKTOP_DIR/5_Import_Workflow.desktop"

# ====================================================================
# PARTIE 6: T√âL√âCHARGEMENT AUTO DES MOD√àLES DE BASE
# ====================================================================

# Cr√©er le fichier de config des mod√®les s'il n'existe pas
if [ ! -f "$SCRIPTS_DIR/models_config.txt" ]; then
    log_info "üìù Cr√©ation du fichier de configuration des mod√®les..."
    
    # Essayer de t√©l√©charger depuis GitHub
    wget -q "https://raw.githubusercontent.com/Elthibert/massed-compute-comfyui/main/models_config.txt" \
         -O "$SCRIPTS_DIR/models_config.txt" 2>/dev/null
    
    # Si pas de t√©l√©chargement ou √©chec, cr√©er config minimale
    if [ ! -f "$SCRIPTS_DIR/models_config.txt" ]; then
        cat > "$SCRIPTS_DIR/models_config.txt" << 'CONFIG'
# Config minimale - Mod√®les essentiels activ√©s par d√©faut
VAE|https://huggingface.co/stabilityai/sd-vae-ft-mse-original/resolve/main/vae-ft-mse-840000-ema-pruned.safetensors|VAE Standard|VAE pour SD 1.5
UPSCALER|https://huggingface.co/datasets/jiboli/upscalers/resolve/main/4x-UltraSharp.pth|4x-UltraSharp|Upscaler HQ
CONFIG
    fi
fi

# Option: T√©l√©charger automatiquement les mod√®les non-comment√©s au d√©marrage
# D√©commentez la ligne suivante pour activer le t√©l√©chargement auto
# bash "$SCRIPTS_DIR/download_models.sh" auto &

# ====================================================================
# PARTIE 7: MESSAGE FINAL
# ====================================================================

# Cr√©er un fichier README sur le desktop
cat > "$DESKTOP_DIR/README_COMFYUI.txt" << 'README'
===========================================
    COMFYUI SUR MASSED COMPUTE - GUIDE
===========================================

üéØ UTILISATION DES RACCOURCIS:
--------------------------------
1. Double-cliquez sur "1_Install_ComfyUI" (premi√®re fois seulement)
2. Double-cliquez sur "2_Launch_ComfyUI" pour d√©marrer
3. Ouvrez votre navigateur sur http://localhost:8188

OU

Double-cliquez sur "‚ö° AUTO TOUT FAIRE" qui fait tout automatiquement!

üì• MOD√àLES:
-----------
- Utilisez "3_Download_Models" pour t√©l√©charger des mod√®les de base
- Ou placez vos propres mod√®les dans ComfyUI/models/
- Utilisez "5_Import_Workflow" pour importer des workflows

üìÅ STRUCTURE DES DOSSIERS:
--------------------------
ComfyUI/
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ checkpoints/  (mod√®les principaux)
‚îÇ   ‚îú‚îÄ‚îÄ loras/        (LoRAs)
‚îÇ   ‚îú‚îÄ‚îÄ vae/          (VAE)
‚îÇ   ‚îî‚îÄ‚îÄ embeddings/   (embeddings)
‚îú‚îÄ‚îÄ input/            (images d'entr√©e)
‚îú‚îÄ‚îÄ output/           (images g√©n√©r√©es)
‚îú‚îÄ‚îÄ workflows/        (vos workflows)
‚îî‚îÄ‚îÄ custom_nodes/     (extensions)

üí° TIPS MASSED COMPUTE:
-----------------------
- ComfyUI Manager est pr√©-install√©
- Les logs apparaissent dans le terminal
- Ctrl+C pour arr√™ter ComfyUI
- Le GPU est automatiquement d√©tect√© et utilis√©

üî• OPTIMISATIONS:
-----------------
- xformers activ√© pour √©conomiser la VRAM
- PyTorch cross-attention activ√©
- Support CUDA 12.1

===========================================
README

log_info "‚úÖ Installation termin√©e pour Massed Compute!"
log_info "üìç Raccourcis cr√©√©s sur le Desktop"
log_info "üöÄ Double-cliquez sur les ic√¥nes pour commencer!"

# Message de notification (si disponible)
which notify-send >/dev/null 2>&1 && notify-send "Massed Compute" "ComfyUI est pr√™t! Raccourcis disponibles sur le Desktop" -i dialog-information

# Optionnel: Lancer automatiquement l'installation
# bash "$SCRIPTS_DIR/install_comfyui.sh"